#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
UltimateSMM Bot - Setup Script
Safe Installation Process
"""

import os
import sys
import subprocess
import json
from datetime import datetime

def run_command(command, description):
    """Safely run system command"""
    print(f"🔧 {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"✅ {description} completed")
            return True
        else:
            print(f"❌ {description} failed: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ {description} error: {e}")
        return False

def check_python_version():
    """Check Python version"""
    print("🐍 Checking Python version...")
    if sys.version_info < (3, 6):
        print("❌ Python 3.6 or higher required")
        return False
    print(f"✅ Python {sys.version_info.major}.{sys.version_info.minor} detected")
    return True

def install_requirements():
    """Install required packages"""
    requirements = [
        "colorama==0.4.6",
        "requests==2.31.0"
    ]
    
    print("📦 Installing requirements...")
    
    for package in requirements:
        if not run_command(f"pip install {package}", f"Installing {package}"):
            return False
    
    return True

def setup_directories():
    """Create required directories"""
    directories = [
        '../CONFIG',
        '../CORE_SYSTEM',
        '../CONTROL_PANEL', 
        '../DATA/users',
        '../DATA/bots',
        '../DATA/analytics',
        '../DATA/backups',
        '../LOGS'
    ]
    
    print("📁 Creating directories...")
    
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print(f"✅ Created: {directory}")
        except Exception as e:
            print(f"❌ Failed to create {directory}: {e}")
            return False
    
    return True

def create_config_files():
    """Create default configuration files"""
    print("⚙️ Creating config files...")
    
    # global_settings.json
    global_config = {
        "app_name": "UltimateSMM Bot",
        "version": "1.0.0",
        "auto_schedule": {
            "active_hours": ["06:00", "23:00"],
            "break_interval": 60,
            "break_duration": 15,
            "auto_restart": True
        },
        "system": {
            "max_users": 100,
            "max_bot_accounts": 500,
            "update_interval": 300
        },
        "language": "bn",
        "timezone": "Asia/Dhaka"
    }
    
    try:
        with open('../CONFIG/global_settings.json', 'w') as f:
            json.dump(global_config, f, indent=4)
        print("✅ Created: CONFIG/global_settings.json")
    except Exception as e:
        print(f"❌ Failed to create config: {e}")
        return False
    
    return True

def main():
    """Main setup function"""
    print("""
╔═══════════════════════════════════════════╗
║         ULTIMATE SMM BOT SETUP           ║
║            Safe Installation             ║
╚═══════════════════════════════════════════╝
    """)
    
    # Check Python
    if not check_python_version():
        sys.exit(1)
    
    # Create directories
    if not setup_directories():
        sys.exit(1)
    
    # Create config files
    if not create_config_files():
        sys.exit(1)
    
    # Install requirements
    if not install_requirements():
        print("⚠️ Some packages failed to install, but continuing...")
    
    print("\n🎉 Setup completed successfully!")
    print("\n📖 Next steps:")
    print("1. Run: python run_bot.py")
    print("2. System will auto-start at 6:00 AM")
    print("3. Manual control via Termux")

if __name__ == "__main__":
    main()